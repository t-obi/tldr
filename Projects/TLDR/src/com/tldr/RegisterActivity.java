package com.tldr;

import java.io.IOException;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ContentValues;
import android.content.DialogInterface;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.json.jackson.JacksonFactory;
import com.tldr.sqlite.TLDRDatabaseHelper;
import com.tldr.tools.ToolBox;

/**
 * An activity that communicates with your App Engine backend via Cloud
 * Endpoints.
 * 
 * When the user hits the "Register" button, a message is sent to the backend
 * (over endpoints) indicating that the device would like to receive broadcast
 * messages from it. Clicking "Register" also has the effect of registering this
 * device for Google Cloud Messaging (GCM). Whenever the backend wants to
 * broadcast a message, it does it via GCM, so that the device does not need to
 * keep polling the backend for messages.
 * 
 * If you've generated an App Engine backend for an existing Android project,
 * this activity will not be hooked in to your main activity as yet. You can
 * easily do so by adding the following lines to your main activity:
 * 
 * Intent intent = new Intent(this, RegisterActivity.class);
 * startActivity(intent);
 * 
 * To make the sample run, you need to set your PROJECT_NUMBER in
 * GCMIntentService.java. If you're going to be running a local version of the
 * App Engine backend (using the DevAppServer), you'll need to toggle the
 * LOCAL_ANDROID_RUN flag in CloudEndpointUtils.java. See the javadoc in these
 * classes for more details.
 * 
 * For a comprehensive walkthrough, check out the documentation at
 * http://developers.google.com/eclipse/docs/cloud_endpoints
 */
public class RegisterActivity extends Activity {


	private SQLiteDatabase db;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_register);

		Button regButton = (Button) findViewById(R.id.btnRegister);

        TextView loginScreen = (TextView) findViewById(R.id.link_to_login);
        
        // Listening to Login Screen link
        loginScreen.setOnClickListener(new View.OnClickListener() {
 
            public void onClick(View arg0) {
                                // Closing registration screen
                // Switching to Login Screen/closing register screen
                finish();
            }
        });
        SQLiteOpenHelper Appdatabase = new TLDRDatabaseHelper(this);
        db=Appdatabase.getWritableDatabase();
		

		regButton.setOnTouchListener(new OnTouchListener(){

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				EditText first_name=((EditText) findViewById(R.id.reg_username));
				EditText password = ((EditText) findViewById(R.id.reg_password));
				EditText email = ((EditText) findViewById(R.id.reg_email));
				boolean success=insertContact(first_name, email, password);
				if(success)
					finish();
				return success;
			}
			
		});


	}

//	@Override
//	protected void onNewIntent(Intent intent) {
//		super.onNewIntent(intent);
//
//		/*
//		 * If we are dealing with an intent generated by the GCMIntentService
//		 * class, then display the provided message.
//		 */
//		if (intent.getBooleanExtra("gcmIntentServiceMessage", false)) {
//
//			showDialog(intent.getStringExtra("message"));
//
//			if (intent.getBooleanExtra("registrationMessage", false)) {
//
//				if (intent.getBooleanExtra("error", false)) {
//					/*
//					 * If we get a registration/unregistration-related error,
//					 * and we're in the process of registering, then we move
//					 * back to the unregistered state. If we're in the process
//					 * of unregistering, then we move back to the registered
//					 * state.
//					 */
//					if (curState == State.REGISTERING) {
//						updateState(State.UNREGISTERED);
//					} else {
//						updateState(State.REGISTERED);
//					}
//				} else {
//					/*
//					 * If we get a registration/unregistration-related success,
//					 * and we're in the process of registering, then we move to
//					 * the registered state. If we're in the process of
//					 * unregistering, the we move back to the unregistered
//					 * state.
//					 */
//					if (curState == State.REGISTERING) {
//						updateState(State.REGISTERED);
//					} else {
//						updateState(State.UNREGISTERED);
//					}
//				}
//			} else {
//				/*
//				 * if we didn't get a registration/unregistration message then
//				 * go get the last 5 messages from app-engine
//				 */
//				new QueryMessagesTask(this, messageEndpoint).execute();
//			}
//		}
//	}

//	private void updateState(State newState) {
//		Button registerButton = (Button) findViewById(R.id.btnRegister);
//		switch (newState) {
//		case REGISTERED:
//			registerButton.setText("Unregister");
//			registerButton.setOnTouchListener(unregisterListener);
//			registerButton.setEnabled(true);
//			break;
//
//		case REGISTERING:
//			registerButton.setText("Registering...");
//			registerButton.setEnabled(false);
//			break;
//
//		case UNREGISTERED:
//			registerButton.setText("Register");
//			registerButton.setOnTouchListener(registerListener);
//			registerButton.setEnabled(true);
//			break;
//
//		case UNREGISTERING:
//			registerButton.setText("Unregistering...");
//			registerButton.setEnabled(false);
//			break;
//		}
//		curState = newState;
//	}



	private void showDialog(String message) {
		new AlertDialog.Builder(this)
				.setMessage(message)
				.setPositiveButton(android.R.string.ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								dialog.dismiss();
							}
						}).show();
	}
	
	protected boolean insertContact(EditText mUsernameView, EditText mEmailView, EditText mPasswordView) {
		//validate
		String mUsername=mUsernameView.getText().toString();
		String mEmail = mEmailView.getText().toString();
		String mPassword = mPasswordView.getText().toString();
		View focusView=null;
		boolean cancel=false;
		// Check for a valid username.
		if (TextUtils.isEmpty(mUsername)) {
			String errorString=getString(R.string.error_field_required);
			ToolBox.showErrorMessage(mUsernameView, errorString);
			focusView = mPasswordView;
			cancel = true;
		}
		// Check for a valid password.
		if (TextUtils.isEmpty(mPassword)) {
			String errorString=getString(R.string.error_field_required);
			ToolBox.showErrorMessage(mPasswordView, errorString);
			focusView = mPasswordView;
			cancel = true;
		} else if (mPassword.length() < 4) {
			String errorString=getString(R.string.error_invalid_password);
			ToolBox.showErrorMessage(mPasswordView, errorString);
			focusView = mPasswordView;
			cancel = true;
		}

		// Check for a valid email address.
		if (TextUtils.isEmpty(mEmail)) {
			String errorString=getString(R.string.error_field_required);
			ToolBox.showErrorMessage(mPasswordView, errorString);

			focusView = mEmailView;
			cancel = true;
		} else if (!mEmail.contains("@")) {
			String errorString=getString(R.string.error_invalid_email);
			ToolBox.showErrorMessage(mPasswordView, errorString);

			focusView = mEmailView;
			cancel = true;
		}		
		if(!cancel){
		ContentValues initialValues = new ContentValues();
	    initialValues.put("user_name", mUsername);
	    initialValues.put("email", mEmail);
	    initialValues.put("password", mPassword);
		db.insert(TLDRDatabaseHelper.USERAUTH_TABLE_NAME, null, initialValues);
		}
		return !cancel;
	}


}
